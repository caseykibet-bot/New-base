const config = require('../settings');
const moment = require('moment-timezone');
const { malvin, commands } = require('../malvin');
const { runtime } = require('../lib/functions');
const os = require('os');
const { getPrefix } = require('../lib/prefix');
const more = String.fromCharCode(8206);
const readmore = more.repeat(4001);

// Fonction pour styliser les majuscules comme  ú…™
function toUpperStylized(str) {
  const stylized = {
    A: '·¥Ä', B: ' ô', C: '·¥Ñ', D: '·¥Ö', E: '·¥á', F: '“ì', G: '…¢', H: ' ú',
    I: '…™', J: '·¥ä', K: '·¥ã', L: ' ü', M: '·¥ç', N: '…¥', O: '·¥è', P: '·¥ò',
    Q: '«´', R: ' Ä', S: 's', T: '·¥õ', U: '·¥ú', V: '·¥†', W: '·¥°', X: 'x',
    Y: ' è', Z: '·¥¢',
    a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: '“ì', g: '…¢', h: ' ú',
    i: '…™', j: '·¥ä', k: '·¥ã', l: ' ü', m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò',
    q: '«´', r: ' Ä', s: 's', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x',
    y: ' è', z: '·¥¢'
  };
  return str.split('').map(c => stylized[c] || c).join('');
}

// Normalisation des cat√©gories
const normalize = (str) => {
  if (!str) return 'other';
  return str.toLowerCase().replace(/\s+menu$/, '').trim() || 'other';
};

// Emojis par cat√©gorie normalis√©e
const emojiByCategory = {
  ai: 'ü§ñ',
  anime: 'üç•',
  audio: 'üéß',
  bible: 'üìñ',
  download: '‚¨áÔ∏è',
  downloader: 'üì•',
  fun: 'üéÆ',
  game: 'üïπÔ∏è',
  group: 'üë•',
  img_edit: 'üñåÔ∏è',
  info: '‚ÑπÔ∏è',
  information: 'üß†',
  logo: 'üñºÔ∏è',
  main: 'üè†',
  media: 'üéûÔ∏è',
  menu: 'üìú',
  misc: 'üì¶',
  music: 'üéµ',
  other: 'üìÅ',
  owner: 'üëë',
  privacy: 'üîí',
  search: 'üîé',
  settings: '‚öôÔ∏è',
  sticker: 'üåü',
  tools: 'üõ†Ô∏è',
  user: 'üë§',
  utilities: 'üß∞',
  utility: 'üßÆ',
  wallpapers: 'üñºÔ∏è',
  whatsapp: 'üì±',
};

malvin({
  pattern: 'menu',
  alias: ['allmenu', 'help', 'commands'],
  desc: 'Show all bot commands',
  category: 'menu',
  react: 'üëå',
  filename: __filename
}, async (malvin, mek, m, { from, sender, reply }) => {
  try {
    const prefix = getPrefix();
    const timezone = config.TIMEZONE || 'Africa/Nairobi';
    const time = moment().tz(timezone).format('HH:mm:ss');
    const date = moment().tz(timezone).format('dddd, DD MMMM YYYY');

    const uptime = () => {
      let sec = process.uptime();
      let h = Math.floor(sec / 3600);
      let m = Math.floor((sec % 3600) / 60);
      let s = Math.floor(sec % 60);
      return `${h}h ${m}m ${s}s`;
    };

    let menu = `*‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*
*‚îÉ ·¥úÍú±·¥á Ä : @${sender.split("@")[0]}*
*‚îÉ  Ä·¥ú…¥·¥õ…™·¥ç·¥á : ${uptime()}*
*‚îÉ ·¥ç·¥è·¥Ö·¥á : ${config.MODE || 'public'}*
*‚îÉ ·¥ò Ä·¥á“ì…™x : „Äå ${prefix}„Äç* 
*‚îÉ ·¥è·¥°…¥·¥á Ä : ${config.OWNER_NAME || 'Unknown'}*
*‚îÉ ·¥ò ü·¥ú…¢…™…¥Íú± : „Äé ${commands.length} „Äè*
*‚îÉ ·¥Ö·¥á·¥† : ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás üéÄ*
*‚îÉ ·¥†·¥á ÄÍú±…™·¥è…¥ : 2.0.0*
*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*${readmore}`;

    // Define fakevCard for quoting messages - FIXED VCARD FORMAT
    const fakevCard = {
        key: {
            fromMe: false,
            participant: "0@s.whatsapp.net",
            remoteJid: "status@broadcast"
        },
        message: {
            contactMessage: {
                displayName: "¬© ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ‚úÖ",
                vcard: `BEGIN:VCARD\nVERSION:3.0\nN:;Meta;;;\nFN:Meta\nORG:META AI;\nTEL;type=CELL;type=VOICE;waid=254101022551:+254 101 022 551\nEND:VCARD`
            }
        }
    };

    // Group commands by category
    const categories = {};
    for (const cmd of commands) {
      if (cmd.category && !cmd.dontAdd && cmd.pattern) {
        const normalizedCategory = normalize(cmd.category);
        categories[normalizedCategory] = categories[normalizedCategory] || [];
        
        // Extract command name without prefix
        const commandPattern = cmd.pattern.split('|')[0].trim();
        const commandName = commandPattern.replace(/^[\\/*]/, ''); // Remove leading special chars
        categories[normalizedCategory].push(commandName);
      }
    }

    // Add sorted categories with stylized text
    const sortedCategories = Object.keys(categories).sort();
    for (const cat of sortedCategories) {
      const emoji = emojiByCategory[cat] || 'üí´';
      menu += `\n\n*‚ï≠‚îÄ‚îÄ‚îÄ„Äé ${emoji} ${toUpperStylized(cat)} ${toUpperStylized('Menu')} „Äè‚îÄ‚îÄ‚ä∑*\n`;
      
      // Sort commands alphabetically
      for (const cmd of categories[cat].sort()) {
        menu += `*‚îÇ ‚úò ${cmd}*\n`;
      }
      menu += `*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ä∑*`;
    }

    menu += `\n\n> ${config.DESCRIPTION || toUpperStylized('Explore the bot commands!')}`;
    
    // Context info for newsletter with external ad
    const imageContextInfo = {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
        newsletterJid: '120363405292255480@newsletter',
        newsletterName: '·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás üéÄ',
        serverMessageId: -1
      },
      externalAdReply: {
        title: '·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás ·¥õ·¥á·¥Ñ ú',
        body: '·¥Ñ·¥Äs·¥á è Ä ú·¥è·¥Ö·¥ás  ô·¥è·¥õ',
        mediaType: 1,
        previewType: 0,
        sourceUrl: 'https://whatsapp.com/channel/0029VaExampleChannel',
        thumbnailUrl:'https://files.catbox.moe/awc1lu.jpeg',
        mediaUrl: ''
      }
    };

    // Send menu image
    await malvin.sendMessage(
      from,
      {
        image:  { url: 'https://files.catbox.moe/awc1lu.jpeg' },
        caption: menu,
        contextInfo: imageContextInfo,
        mentions: [sender]
      },
      { quoted: fakevCard } // Use the fixed vCard as quoted message
    );

  } catch (e) {
    console.error('Menu Error:', e);
    await reply(`‚ùå ${toUpperStylized('Error')}: Failed to show menu. Try again.\n${toUpperStylized('Details')}: ${e.message}`);
  }
});
